/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TodoItemStruct = {
  todoId: BigNumberish;
  title: string;
  finished: boolean;
  creator: string;
  amount: BigNumberish;
};

export type TodoItemStructOutput = [
  BigNumber,
  string,
  boolean,
  string,
  BigNumber
] & {
  todoId: BigNumber;
  title: string;
  finished: boolean;
  creator: string;
  amount: BigNumber;
};

export interface TodoListInterface extends utils.Interface {
  functions: {
    "accountableMarkComplete(uint256)": FunctionFragment;
    "askAccountablesToMarkComplete(uint256)": FunctionFragment;
    "completeTodo(uint256)": FunctionFragment;
    "createTodo(string)": FunctionFragment;
    "fetchUnfinishedTodos()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountableMarkComplete",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "askAccountablesToMarkComplete",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createTodo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fetchUnfinishedTodos",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountableMarkComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "askAccountablesToMarkComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTodo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchUnfinishedTodos",
    data: BytesLike
  ): Result;

  events: {
    "TodoCompleted()": EventFragment;
    "TodoExpired()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TodoCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TodoExpired"): EventFragment;
}

export type TodoCompletedEvent = TypedEvent<[], {}>;

export type TodoCompletedEventFilter = TypedEventFilter<TodoCompletedEvent>;

export type TodoExpiredEvent = TypedEvent<[], {}>;

export type TodoExpiredEventFilter = TypedEventFilter<TodoExpiredEvent>;

export interface TodoList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountableMarkComplete(
      todoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    askAccountablesToMarkComplete(
      todoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTodo(
      todoId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTodo(
      title: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchUnfinishedTodos(
      overrides?: CallOverrides
    ): Promise<[TodoItemStructOutput[]]>;
  };

  accountableMarkComplete(
    todoId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  askAccountablesToMarkComplete(
    todoId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTodo(
    todoId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTodo(
    title: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchUnfinishedTodos(
    overrides?: CallOverrides
  ): Promise<TodoItemStructOutput[]>;

  callStatic: {
    accountableMarkComplete(
      todoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    askAccountablesToMarkComplete(
      todoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeTodo(
      todoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTodo(title: string, overrides?: CallOverrides): Promise<BigNumber>;

    fetchUnfinishedTodos(
      overrides?: CallOverrides
    ): Promise<TodoItemStructOutput[]>;
  };

  filters: {
    "TodoCompleted()"(): TodoCompletedEventFilter;
    TodoCompleted(): TodoCompletedEventFilter;

    "TodoExpired()"(): TodoExpiredEventFilter;
    TodoExpired(): TodoExpiredEventFilter;
  };

  estimateGas: {
    accountableMarkComplete(
      todoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    askAccountablesToMarkComplete(
      todoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTodo(
      todoId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTodo(
      title: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchUnfinishedTodos(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountableMarkComplete(
      todoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    askAccountablesToMarkComplete(
      todoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTodo(
      todoId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTodo(
      title: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchUnfinishedTodos(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
