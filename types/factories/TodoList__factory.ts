/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TodoList, TodoListInterface } from "../TodoList";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "TodoCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "TodoExpired",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "todoId",
        type: "uint256",
      },
    ],
    name: "accountableMarkComplete",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "todoId",
        type: "uint256",
      },
    ],
    name: "askAccountablesToMarkComplete",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "todoId",
        type: "uint256",
      },
    ],
    name: "completeTodo",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
    ],
    name: "createTodo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchUnfinishedTodos",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "todoId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "bool",
            name: "finished",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "creator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct TodoList.TodoItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060016000819055506110b7806100286000396000f3fe60806040526004361061004a5760003560e01c806320fe21441461004f578063210528521461006b578063de941a5414610094578063e0edf3f8146100bf578063e34f1221146100e8575b600080fd5b61006960048036038101906100649190610b3e565b610118565b005b34801561007757600080fd5b50610092600480360381019061008d9190610b3e565b61035d565b005b3480156100a057600080fd5b506100a9610360565b6040516100b69190610cfe565b60405180910390f35b3480156100cb57600080fd5b506100e660048036038101906100e19190610b3e565b610808565b005b61010260048036038101906100fd9190610afd565b61080b565b60405161010f9190610d40565b60405180910390f35b6002600054141561015e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015590610d20565b60405180910390fd5b600260008190555060006101726001610972565b905060005b81811015610350576000600360006001846101929190610e17565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820180546101c590610ef7565b80601f01602080910402602001604051908101604052809291908181526020018280546101f190610ef7565b801561023e5780601f106102135761010080835404028352916020019161023e565b820191906000526020600020905b81548152906001019060200180831161022157829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050838160000151141561033c5760018160400190151590811515815250503373ffffffffffffffffffffffffffffffffffffffff166108fc82608001519081150290604051600060405180830381858888f1935050505015801561032b573d6000803e3d6000fd5b50610334610996565b905050610350565b50808061034890610f5a565b915050610177565b5050600160008190555050565b50565b6060600061036e6001610972565b905060008060005b83811015610417573373ffffffffffffffffffffffffffffffffffffffff16600360006001846103a69190610e17565b815260200190815260200160002060020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610404576001836104019190610e17565b92505b808061040f90610f5a565b915050610376565b5060008267ffffffffffffffff81111561045a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561049357816020015b610480610996565b8152602001906001900390816104785790505b50905060005b848110156107fd576000600360006001846104b49190610e17565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820180546104e790610ef7565b80601f016020809104026020016040519081016040528092919081815260200182805461051390610ef7565b80156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152505090503373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614801561062d57506000151581604001511515145b156107e9576000600360006001856106459190610e17565b81526020019081526020016000206000015490506000600360008381526020019081526020016000209050806040518060a00160405290816000820154815260200160018201805461069690610ef7565b80601f01602080910402602001604051908101604052809291908181526020018280546106c290610ef7565b801561070f5780601f106106e45761010080835404028352916020019161070f565b820191906000526020600020905b8154815290600101906020018083116106f257829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250508587815181106107cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052506001866107e49190610e17565b955050505b5080806107f590610f5a565b915050610499565b508094505050505090565b50565b600060026000541415610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90610d20565b60405180910390fd5b60026000819055506108656001610980565b60006108716001610972565b90506040518060a001604052808281526020018481526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200134815250600360008381526020019081526020016000206000820151816000015560208201518160010190805190602001906108ec9291906109dd565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030155905050809150506001600081905550919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6040518060a001604052806000815260200160608152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8280546109e990610ef7565b90600052602060002090601f016020900481019282610a0b5760008555610a52565b82601f10610a2457805160ff1916838001178555610a52565b82800160010185558215610a52579182015b82811115610a51578251825591602001919060010190610a36565b5b509050610a5f9190610a63565b5090565b5b80821115610a7c576000816000905550600101610a64565b5090565b6000610a93610a8e84610d80565b610d5b565b905082815260208101848484011115610aab57600080fd5b610ab6848285610eb5565b509392505050565b600082601f830112610acf57600080fd5b8135610adf848260208601610a80565b91505092915050565b600081359050610af78161106a565b92915050565b600060208284031215610b0f57600080fd5b600082013567ffffffffffffffff811115610b2957600080fd5b610b3584828501610abe565b91505092915050565b600060208284031215610b5057600080fd5b6000610b5e84828501610ae8565b91505092915050565b6000610b738383610c6a565b905092915050565b610b8481610e6d565b82525050565b6000610b9582610dc1565b610b9f8185610de4565b935083602082028501610bb185610db1565b8060005b85811015610bed5784840389528151610bce8582610b67565b9450610bd983610dd7565b925060208a01995050600181019050610bb5565b50829750879550505050505092915050565b610c0881610e7f565b82525050565b6000610c1982610dcc565b610c238185610df5565b9350610c33818560208601610ec4565b610c3c81611030565b840191505092915050565b6000610c54601f83610e06565b9150610c5f82611041565b602082019050919050565b600060a083016000830151610c826000860182610ce0565b5060208301518482036020860152610c9a8282610c0e565b9150506040830151610caf6040860182610bff565b506060830151610cc26060860182610b7b565b506080830151610cd56080860182610ce0565b508091505092915050565b610ce981610eab565b82525050565b610cf881610eab565b82525050565b60006020820190508181036000830152610d188184610b8a565b905092915050565b60006020820190508181036000830152610d3981610c47565b9050919050565b6000602082019050610d556000830184610cef565b92915050565b6000610d65610d76565b9050610d718282610f29565b919050565b6000604051905090565b600067ffffffffffffffff821115610d9b57610d9a611001565b5b610da482611030565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610e2282610eab565b9150610e2d83610eab565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e6257610e61610fa3565b5b828201905092915050565b6000610e7882610e8b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610ee2578082015181840152602081019050610ec7565b83811115610ef1576000848401525b50505050565b60006002820490506001821680610f0f57607f821691505b60208210811415610f2357610f22610fd2565b5b50919050565b610f3282611030565b810181811067ffffffffffffffff82111715610f5157610f50611001565b5b80604052505050565b6000610f6582610eab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9857610f97610fa3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61107381610eab565b811461107e57600080fd5b5056fea26469706673582212204812694526daa3a3d46fd22bcdec7c053bd7c24141cbe6d3613baf0ea91d632664736f6c63430008040033";

type TodoListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TodoListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TodoList__factory extends ContractFactory {
  constructor(...args: TodoListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TodoList> {
    return super.deploy(overrides || {}) as Promise<TodoList>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TodoList {
    return super.attach(address) as TodoList;
  }
  connect(signer: Signer): TodoList__factory {
    return super.connect(signer) as TodoList__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TodoListInterface {
    return new utils.Interface(_abi) as TodoListInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TodoList {
    return new Contract(address, _abi, signerOrProvider) as TodoList;
  }
}
